{"ast":null,"code":"import axios from 'axios';\n\n// We'll use The Movie Database (TMDB) API\nconst API_KEY = 'YOUR_TMDB_API_KEY'; // Replace with your actual API key\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p';\n\n// For demo purposes, if you don't have an API key, we'll use this sample data\nconst SAMPLE_MOVIES = [{\n  id: 1,\n  title: 'Inception',\n  overview: 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.',\n  poster_path: '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg',\n  backdrop_path: '/s3TBrRGB1iav7gFOCNx3H31MoES.jpg',\n  release_date: '2010-07-16',\n  vote_average: 8.4,\n  genres: ['Action', 'Science Fiction', 'Adventure']\n}, {\n  id: 2,\n  title: 'The Shawshank Redemption',\n  overview: 'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden.',\n  poster_path: '/q6y0Go1tsGEsmtFryDOJo3dEmqu.jpg',\n  backdrop_path: '/kXfqcdQKsToO0OUXHcrrNCHDBzO.jpg',\n  release_date: '1994-09-23',\n  vote_average: 8.7,\n  genres: ['Drama', 'Crime']\n}, {\n  id: 3,\n  title: 'The Dark Knight',\n  overview: 'Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets.',\n  poster_path: '/qJ2tW6WMUDux911r6m7haRef0WH.jpg',\n  backdrop_path: '/nMKdUUepR0i5zn0y1T4CsSB5chy.jpg',\n  release_date: '2008-07-16',\n  vote_average: 8.5,\n  genres: ['Drama', 'Action', 'Crime', 'Thriller']\n}, {\n  id: 4,\n  title: 'Pulp Fiction',\n  overview: 'A burger-loving hit man, his philosophical partner, a drug-addled gangster\\'s moll and a washed-up boxer converge in this sprawling, comedic crime caper.',\n  poster_path: '/d5iIlFn5s0ImszYzBPb8JPIfbXD.jpg',\n  backdrop_path: '/suaEOtk1N1sgg2MTM7oZd2cfVp3.jpg',\n  release_date: '1994-09-10',\n  vote_average: 8.5,\n  genres: ['Thriller', 'Crime']\n}, {\n  id: 5,\n  title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy.',\n  poster_path: '/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg',\n  backdrop_path: '/rr7E0NoGKxvbkb89eR1GwfoYjpA.jpg',\n  release_date: '1999-10-15',\n  vote_average: 8.4,\n  genres: ['Drama']\n}, {\n  id: 6,\n  title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do.',\n  poster_path: '/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg',\n  backdrop_path: '/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg',\n  release_date: '1994-06-23',\n  vote_average: 8.5,\n  genres: ['Comedy', 'Drama', 'Romance']\n}];\n\n// API functions\nconst api = {\n  // Get trending movies\n  getTrending: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching trending movies:', error);\n      return SAMPLE_MOVIES;\n    }\n  },\n  // Search for movies\n  searchMovies: async query => {\n    try {\n      const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`);\n      return response.data.results;\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      return SAMPLE_MOVIES.filter(movie => movie.title.toLowerCase().includes(query.toLowerCase()));\n    }\n  },\n  // Get movie details\n  getMovieDetails: async id => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      return SAMPLE_MOVIES.find(movie => movie.id === parseInt(id)) || SAMPLE_MOVIES[0];\n    }\n  },\n  // Get movie videos (trailers, etc.)\n  getMovieVideos: async id => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movie/${id}/videos?api_key=${API_KEY}`);\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching movie videos:', error);\n      return [{\n        key: 'dQw4w9WgXcQ',\n        site: 'YouTube',\n        type: 'Trailer'\n      }]; // Sample YouTube video\n    }\n  },\n  // Helper function to get image URL\n  getImageUrl: (path, size = 'original') => {\n    if (!path) return null;\n    return `${IMAGE_BASE_URL}/${size}${path}`;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_KEY","BASE_URL","IMAGE_BASE_URL","SAMPLE_MOVIES","id","title","overview","poster_path","backdrop_path","release_date","vote_average","genres","api","getTrending","response","get","data","results","error","console","searchMovies","query","filter","movie","toLowerCase","includes","getMovieDetails","find","parseInt","getMovieVideos","key","site","type","getImageUrl","path","size"],"sources":["C:/Users/hp/.cursor-tutor/netflix-clone/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// We'll use The Movie Database (TMDB) API\r\nconst API_KEY = 'YOUR_TMDB_API_KEY'; // Replace with your actual API key\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p';\r\n\r\n// For demo purposes, if you don't have an API key, we'll use this sample data\r\nconst SAMPLE_MOVIES = [\r\n  {\r\n    id: 1,\r\n    title: 'Inception',\r\n    overview: 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.',\r\n    poster_path: '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg',\r\n    backdrop_path: '/s3TBrRGB1iav7gFOCNx3H31MoES.jpg',\r\n    release_date: '2010-07-16',\r\n    vote_average: 8.4,\r\n    genres: ['Action', 'Science Fiction', 'Adventure']\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'The Shawshank Redemption',\r\n    overview: 'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden.',\r\n    poster_path: '/q6y0Go1tsGEsmtFryDOJo3dEmqu.jpg',\r\n    backdrop_path: '/kXfqcdQKsToO0OUXHcrrNCHDBzO.jpg',\r\n    release_date: '1994-09-23',\r\n    vote_average: 8.7,\r\n    genres: ['Drama', 'Crime']\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'The Dark Knight',\r\n    overview: 'Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets.',\r\n    poster_path: '/qJ2tW6WMUDux911r6m7haRef0WH.jpg',\r\n    backdrop_path: '/nMKdUUepR0i5zn0y1T4CsSB5chy.jpg',\r\n    release_date: '2008-07-16',\r\n    vote_average: 8.5,\r\n    genres: ['Drama', 'Action', 'Crime', 'Thriller']\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Pulp Fiction',\r\n    overview: 'A burger-loving hit man, his philosophical partner, a drug-addled gangster\\'s moll and a washed-up boxer converge in this sprawling, comedic crime caper.',\r\n    poster_path: '/d5iIlFn5s0ImszYzBPb8JPIfbXD.jpg',\r\n    backdrop_path: '/suaEOtk1N1sgg2MTM7oZd2cfVp3.jpg',\r\n    release_date: '1994-09-10',\r\n    vote_average: 8.5,\r\n    genres: ['Thriller', 'Crime']\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Fight Club',\r\n    overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy.',\r\n    poster_path: '/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg',\r\n    backdrop_path: '/rr7E0NoGKxvbkb89eR1GwfoYjpA.jpg',\r\n    release_date: '1999-10-15',\r\n    vote_average: 8.4,\r\n    genres: ['Drama']\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Forrest Gump',\r\n    overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do.',\r\n    poster_path: '/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg',\r\n    backdrop_path: '/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg',\r\n    release_date: '1994-06-23',\r\n    vote_average: 8.5,\r\n    genres: ['Comedy', 'Drama', 'Romance']\r\n  }\r\n];\r\n\r\n// API functions\r\nconst api = {\r\n  // Get trending movies\r\n  getTrending: async () => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching trending movies:', error);\r\n      return SAMPLE_MOVIES;\r\n    }\r\n  },\r\n\r\n  // Search for movies\r\n  searchMovies: async (query) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`);\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error searching movies:', error);\r\n      return SAMPLE_MOVIES.filter(movie => \r\n        movie.title.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    }\r\n  },\r\n\r\n  // Get movie details\r\n  getMovieDetails: async (id) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching movie details:', error);\r\n      return SAMPLE_MOVIES.find(movie => movie.id === parseInt(id)) || SAMPLE_MOVIES[0];\r\n    }\r\n  },\r\n\r\n  // Get movie videos (trailers, etc.)\r\n  getMovieVideos: async (id) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/movie/${id}/videos?api_key=${API_KEY}`);\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching movie videos:', error);\r\n      return [{ key: 'dQw4w9WgXcQ', site: 'YouTube', type: 'Trailer' }]; // Sample YouTube video\r\n    }\r\n  },\r\n\r\n  // Helper function to get image URL\r\n  getImageUrl: (path, size = 'original') => {\r\n    if (!path) return null;\r\n    return `${IMAGE_BASE_URL}/${size}${path}`;\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}