{"ast":null,"code":"// Mock WebSocket implementation for the Watch Party feature\n// In a real application, this would connect to a real WebSocket server\n\nclass WatchPartyService {\n  constructor() {\n    this.socket = null;\n    this.roomCode = null;\n    this.username = null;\n    this.callbacks = {\n      onUserJoined: null,\n      onUserLeft: null,\n      onPlaybackUpdate: null,\n      onChatMessage: null,\n      onReaction: null,\n      onConnectionChange: null,\n      onError: null\n    };\n\n    // Mock participants for demo\n    this.mockParticipants = [{\n      id: 'user1',\n      username: 'Alex',\n      isHost: false\n    }, {\n      id: 'user2',\n      username: 'Jordan',\n      isHost: false\n    }, {\n      id: 'user3',\n      username: 'Taylor',\n      isHost: false\n    }];\n  }\n\n  // Initialize connection\n  connect(roomCode, username, isHost = false) {\n    this.roomCode = roomCode;\n    this.username = username;\n\n    // Simulate connection delay\n    setTimeout(() => {\n      console.log(`Connected to watch party room: ${roomCode}`);\n      if (this.callbacks.onConnectionChange) {\n        this.callbacks.onConnectionChange(true);\n      }\n\n      // Simulate other users joining after a delay\n      this._simulateUserJoins();\n    }, 1000);\n    return true;\n  }\n\n  // Disconnect\n  disconnect() {\n    console.log('Disconnected from watch party');\n    if (this.callbacks.onConnectionChange) {\n      this.callbacks.onConnectionChange(false);\n    }\n    this.roomCode = null;\n    this.username = null;\n  }\n\n  // Send playback update\n  sendPlaybackUpdate(action, currentTime) {\n    console.log(`Sending playback update: ${action} at ${currentTime}`);\n\n    // Simulate other users receiving the update\n    setTimeout(() => {\n      if (this.callbacks.onPlaybackUpdate) {\n        this.callbacks.onPlaybackUpdate({\n          username: this.username,\n          action,\n          currentTime,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }, 300);\n  }\n\n  // Send chat message\n  sendChatMessage(message) {\n    console.log(`Sending chat message: ${message}`);\n    if (!message || !message.trim()) {\n      console.error('Cannot send empty message');\n      return false;\n    }\n    try {\n      const messageId = `msg-${Date.now()}`;\n      const timestamp = new Date().toISOString();\n\n      // Simulate message being sent and received\n      setTimeout(() => {\n        if (this.callbacks.onChatMessage) {\n          this.callbacks.onChatMessage({\n            messageId,\n            username: this.username,\n            message,\n            timestamp\n          });\n        }\n\n        // Simulate another user responding\n        this._simulateUserResponse(message);\n      }, 300);\n      return true;\n    } catch (error) {\n      console.error('Error in sendChatMessage:', error);\n      return false;\n    }\n  }\n\n  // Send reaction\n  sendReaction(emoji) {\n    console.log(`Sending reaction: ${emoji}`);\n\n    // Simulate reaction being sent and received\n    setTimeout(() => {\n      if (this.callbacks.onReaction) {\n        this.callbacks.onReaction({\n          username: this.username,\n          emoji,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }, 300);\n  }\n\n  // Set callback functions\n  on(event, callback) {\n    if (this.callbacks.hasOwnProperty(event)) {\n      this.callbacks[event] = callback;\n    } else {\n      console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  // Private methods for simulation\n\n  // Simulate other users joining\n  _simulateUserJoins() {\n    // Get all mock participants to join\n    const allUsers = this._getRandomUsers(this.mockParticipants.length);\n\n    // Make them join with a staggered delay\n    allUsers.forEach((user, index) => {\n      setTimeout(() => {\n        if (this.callbacks.onUserJoined) {\n          this.callbacks.onUserJoined({\n            userId: user.id,\n            username: user.username,\n            isHost: user.isHost,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }, 1500 + index * 1500); // Stagger joins every 1.5 seconds\n    });\n  }\n\n  // Simulate user responses to chat\n  _simulateUserResponse(originalMessage) {\n    // Only respond sometimes\n    if (Math.random() > 0.7) {\n      return;\n    }\n    const randomUser = this._getRandomUsers(1)[0];\n    const responses = [\"Haha, that's funny!\", \"I agree!\", \"Wait, what's happening now?\", \"This part is so good!\", \"I can't believe this scene!\", \"Did you see that?\", \"Classic moment right here\", \"I love this movie!\"];\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n    setTimeout(() => {\n      if (this.callbacks.onChatMessage) {\n        this.callbacks.onChatMessage({\n          messageId: `msg-${Date.now()}`,\n          username: randomUser.username,\n          message: randomResponse,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }, 3000 + Math.random() * 5000);\n\n    // Sometimes send a reaction too\n    if (Math.random() > 0.5) {\n      const emojis = ['👍', '❤️', '😂', '😮', '😢', '👏', '🔥', '🤔'];\n      const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\n      setTimeout(() => {\n        if (this.callbacks.onReaction) {\n          this.callbacks.onReaction({\n            username: randomUser.username,\n            emoji: randomEmoji,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }, 2000 + Math.random() * 3000);\n    }\n  }\n\n  // Get random users from the mock participants\n  _getRandomUsers(count) {\n    const shuffled = [...this.mockParticipants].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n}\n\n// Create an instance of the service\nconst watchPartyServiceInstance = new WatchPartyService();\n\n// Export the instance\nexport default watchPartyServiceInstance;","map":{"version":3,"names":["WatchPartyService","constructor","socket","roomCode","username","callbacks","onUserJoined","onUserLeft","onPlaybackUpdate","onChatMessage","onReaction","onConnectionChange","onError","mockParticipants","id","isHost","connect","setTimeout","console","log","_simulateUserJoins","disconnect","sendPlaybackUpdate","action","currentTime","timestamp","Date","toISOString","sendChatMessage","message","trim","error","messageId","now","_simulateUserResponse","sendReaction","emoji","on","event","callback","hasOwnProperty","allUsers","_getRandomUsers","length","forEach","user","index","userId","originalMessage","Math","random","randomUser","responses","randomResponse","floor","emojis","randomEmoji","count","shuffled","sort","slice","watchPartyServiceInstance"],"sources":["C:/Users/hp/.cursor-tutor/netflix-clone/src/services/watchPartyService.js"],"sourcesContent":["// Mock WebSocket implementation for the Watch Party feature\r\n// In a real application, this would connect to a real WebSocket server\r\n\r\nclass WatchPartyService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.roomCode = null;\r\n    this.username = null;\r\n    this.callbacks = {\r\n      onUserJoined: null,\r\n      onUserLeft: null,\r\n      onPlaybackUpdate: null,\r\n      onChatMessage: null,\r\n      onReaction: null,\r\n      onConnectionChange: null,\r\n      onError: null\r\n    };\r\n    \r\n    // Mock participants for demo\r\n    this.mockParticipants = [\r\n      { id: 'user1', username: 'Alex', isHost: false },\r\n      { id: 'user2', username: 'Jordan', isHost: false },\r\n      { id: 'user3', username: 'Taylor', isHost: false }\r\n    ];\r\n  }\r\n  \r\n  // Initialize connection\r\n  connect(roomCode, username, isHost = false) {\r\n    this.roomCode = roomCode;\r\n    this.username = username;\r\n    \r\n    // Simulate connection delay\r\n    setTimeout(() => {\r\n      console.log(`Connected to watch party room: ${roomCode}`);\r\n      \r\n      if (this.callbacks.onConnectionChange) {\r\n        this.callbacks.onConnectionChange(true);\r\n      }\r\n      \r\n      // Simulate other users joining after a delay\r\n      this._simulateUserJoins();\r\n    }, 1000);\r\n    \r\n    return true;\r\n  }\r\n  \r\n  // Disconnect\r\n  disconnect() {\r\n    console.log('Disconnected from watch party');\r\n    \r\n    if (this.callbacks.onConnectionChange) {\r\n      this.callbacks.onConnectionChange(false);\r\n    }\r\n    \r\n    this.roomCode = null;\r\n    this.username = null;\r\n  }\r\n  \r\n  // Send playback update\r\n  sendPlaybackUpdate(action, currentTime) {\r\n    console.log(`Sending playback update: ${action} at ${currentTime}`);\r\n    \r\n    // Simulate other users receiving the update\r\n    setTimeout(() => {\r\n      if (this.callbacks.onPlaybackUpdate) {\r\n        this.callbacks.onPlaybackUpdate({\r\n          username: this.username,\r\n          action,\r\n          currentTime,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  // Send chat message\r\n  sendChatMessage(message) {\r\n    console.log(`Sending chat message: ${message}`);\r\n    \r\n    if (!message || !message.trim()) {\r\n      console.error('Cannot send empty message');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const messageId = `msg-${Date.now()}`;\r\n      const timestamp = new Date().toISOString();\r\n      \r\n      // Simulate message being sent and received\r\n      setTimeout(() => {\r\n        if (this.callbacks.onChatMessage) {\r\n          this.callbacks.onChatMessage({\r\n            messageId,\r\n            username: this.username,\r\n            message,\r\n            timestamp\r\n          });\r\n        }\r\n        \r\n        // Simulate another user responding\r\n        this._simulateUserResponse(message);\r\n      }, 300);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in sendChatMessage:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Send reaction\r\n  sendReaction(emoji) {\r\n    console.log(`Sending reaction: ${emoji}`);\r\n    \r\n    // Simulate reaction being sent and received\r\n    setTimeout(() => {\r\n      if (this.callbacks.onReaction) {\r\n        this.callbacks.onReaction({\r\n          username: this.username,\r\n          emoji,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  // Set callback functions\r\n  on(event, callback) {\r\n    if (this.callbacks.hasOwnProperty(event)) {\r\n      this.callbacks[event] = callback;\r\n    } else {\r\n      console.error(`Unknown event: ${event}`);\r\n    }\r\n  }\r\n  \r\n  // Private methods for simulation\r\n  \r\n  // Simulate other users joining\r\n  _simulateUserJoins() {\r\n    // Get all mock participants to join\r\n    const allUsers = this._getRandomUsers(this.mockParticipants.length);\r\n    \r\n    // Make them join with a staggered delay\r\n    allUsers.forEach((user, index) => {\r\n      setTimeout(() => {\r\n        if (this.callbacks.onUserJoined) {\r\n          this.callbacks.onUserJoined({\r\n            userId: user.id,\r\n            username: user.username,\r\n            isHost: user.isHost,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      }, 1500 + (index * 1500)); // Stagger joins every 1.5 seconds\r\n    });\r\n  }\r\n  \r\n  // Simulate user responses to chat\r\n  _simulateUserResponse(originalMessage) {\r\n    // Only respond sometimes\r\n    if (Math.random() > 0.7) {\r\n      return;\r\n    }\r\n    \r\n    const randomUser = this._getRandomUsers(1)[0];\r\n    const responses = [\r\n      \"Haha, that's funny!\",\r\n      \"I agree!\",\r\n      \"Wait, what's happening now?\",\r\n      \"This part is so good!\",\r\n      \"I can't believe this scene!\",\r\n      \"Did you see that?\",\r\n      \"Classic moment right here\",\r\n      \"I love this movie!\"\r\n    ];\r\n    \r\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    \r\n    setTimeout(() => {\r\n      if (this.callbacks.onChatMessage) {\r\n        this.callbacks.onChatMessage({\r\n          messageId: `msg-${Date.now()}`,\r\n          username: randomUser.username,\r\n          message: randomResponse,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 3000 + (Math.random() * 5000));\r\n    \r\n    // Sometimes send a reaction too\r\n    if (Math.random() > 0.5) {\r\n      const emojis = ['👍', '❤️', '😂', '😮', '😢', '👏', '🔥', '🤔'];\r\n      const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\r\n      \r\n      setTimeout(() => {\r\n        if (this.callbacks.onReaction) {\r\n          this.callbacks.onReaction({\r\n            username: randomUser.username,\r\n            emoji: randomEmoji,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      }, 2000 + (Math.random() * 3000));\r\n    }\r\n  }\r\n  \r\n  // Get random users from the mock participants\r\n  _getRandomUsers(count) {\r\n    const shuffled = [...this.mockParticipants].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n}\r\n\r\n// Create an instance of the service\r\nconst watchPartyServiceInstance = new WatchPartyService();\r\n\r\n// Export the instance\r\nexport default watchPartyServiceInstance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}