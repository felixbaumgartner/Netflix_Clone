{"ast":null,"code":"// Mock WebSocket implementation for the Watch Party feature\n// In a real application, this would connect to a real WebSocket server\nclass WatchPartyService{constructor(){this.socket=null;this.roomCode=null;this.username=null;this.callbacks={onUserJoined:null,onUserLeft:null,onPlaybackUpdate:null,onChatMessage:null,onReaction:null,onConnectionChange:null,onError:null};// Mock participants for demo\nthis.mockParticipants=[{id:'user1',username:'Alex',isHost:false},{id:'user2',username:'Jordan',isHost:false},{id:'user3',username:'Taylor',isHost:false}];}// Initialize connection\nconnect(roomCode,username){let isHost=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;this.roomCode=roomCode;this.username=username;// Simulate connection delay\nsetTimeout(()=>{console.log(`Connected to watch party room: ${roomCode}`);if(this.callbacks.onConnectionChange){this.callbacks.onConnectionChange(true);}// Simulate other users joining after a delay\nthis._simulateUserJoins();},1000);return true;}// Disconnect\ndisconnect(){console.log('Disconnected from watch party');if(this.callbacks.onConnectionChange){this.callbacks.onConnectionChange(false);}this.roomCode=null;this.username=null;}// Send playback update\nsendPlaybackUpdate(action,currentTime){console.log(`Sending playback update: ${action} at ${currentTime}`);// Simulate other users receiving the update\nsetTimeout(()=>{if(this.callbacks.onPlaybackUpdate){this.callbacks.onPlaybackUpdate({username:this.username,action,currentTime,timestamp:new Date().toISOString()});}},300);}// Send chat message\nsendChatMessage(message){console.log(`Sending chat message: ${message}`);// Simulate message being sent and received\nsetTimeout(()=>{if(this.callbacks.onChatMessage){this.callbacks.onChatMessage({messageId:`msg-${Date.now()}`,username:this.username,message,timestamp:new Date().toISOString()});}// Simulate another user responding\nthis._simulateUserResponse(message);},300);}// Send reaction\nsendReaction(emoji){console.log(`Sending reaction: ${emoji}`);// Simulate reaction being sent and received\nsetTimeout(()=>{if(this.callbacks.onReaction){this.callbacks.onReaction({username:this.username,emoji,timestamp:new Date().toISOString()});}},300);}// Set callback functions\non(event,callback){if(this.callbacks.hasOwnProperty(event)){this.callbacks[event]=callback;}else{console.error(`Unknown event: ${event}`);}}// Private methods for simulation\n// Simulate other users joining\n_simulateUserJoins(){const randomUsers=this._getRandomUsers(2);randomUsers.forEach((user,index)=>{setTimeout(()=>{if(this.callbacks.onUserJoined){this.callbacks.onUserJoined({userId:user.id,username:user.username,isHost:user.isHost,timestamp:new Date().toISOString()});}},2000+index*3000);// Stagger joins\n});}// Simulate user responses to chat\n_simulateUserResponse(originalMessage){// Only respond sometimes\nif(Math.random()>0.7){return;}const randomUser=this._getRandomUsers(1)[0];const responses=[\"Haha, that's funny!\",\"I agree!\",\"Wait, what's happening now?\",\"This part is so good!\",\"I can't believe this scene!\",\"Did you see that?\",\"Classic moment right here\",\"I love this movie!\"];const randomResponse=responses[Math.floor(Math.random()*responses.length)];setTimeout(()=>{if(this.callbacks.onChatMessage){this.callbacks.onChatMessage({messageId:`msg-${Date.now()}`,username:randomUser.username,message:randomResponse,timestamp:new Date().toISOString()});}},3000+Math.random()*5000);// Sometimes send a reaction too\nif(Math.random()>0.5){const emojis=['👍','❤️','😂','😮','😢','👏','🔥','🤔'];const randomEmoji=emojis[Math.floor(Math.random()*emojis.length)];setTimeout(()=>{if(this.callbacks.onReaction){this.callbacks.onReaction({username:randomUser.username,emoji:randomEmoji,timestamp:new Date().toISOString()});}},2000+Math.random()*3000);}}// Get random users from the mock participants\n_getRandomUsers(count){const shuffled=[...this.mockParticipants].sort(()=>0.5-Math.random());return shuffled.slice(0,count);}}export default new WatchPartyService();","map":{"version":3,"names":["WatchPartyService","constructor","socket","roomCode","username","callbacks","onUserJoined","onUserLeft","onPlaybackUpdate","onChatMessage","onReaction","onConnectionChange","onError","mockParticipants","id","isHost","connect","arguments","length","undefined","setTimeout","console","log","_simulateUserJoins","disconnect","sendPlaybackUpdate","action","currentTime","timestamp","Date","toISOString","sendChatMessage","message","messageId","now","_simulateUserResponse","sendReaction","emoji","on","event","callback","hasOwnProperty","error","randomUsers","_getRandomUsers","forEach","user","index","userId","originalMessage","Math","random","randomUser","responses","randomResponse","floor","emojis","randomEmoji","count","shuffled","sort","slice"],"sources":["C:/Users/hp/.cursor-tutor/netflix-clone/src/services/watchPartyService.js"],"sourcesContent":["// Mock WebSocket implementation for the Watch Party feature\r\n// In a real application, this would connect to a real WebSocket server\r\n\r\nclass WatchPartyService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.roomCode = null;\r\n    this.username = null;\r\n    this.callbacks = {\r\n      onUserJoined: null,\r\n      onUserLeft: null,\r\n      onPlaybackUpdate: null,\r\n      onChatMessage: null,\r\n      onReaction: null,\r\n      onConnectionChange: null,\r\n      onError: null\r\n    };\r\n    \r\n    // Mock participants for demo\r\n    this.mockParticipants = [\r\n      { id: 'user1', username: 'Alex', isHost: false },\r\n      { id: 'user2', username: 'Jordan', isHost: false },\r\n      { id: 'user3', username: 'Taylor', isHost: false }\r\n    ];\r\n  }\r\n  \r\n  // Initialize connection\r\n  connect(roomCode, username, isHost = false) {\r\n    this.roomCode = roomCode;\r\n    this.username = username;\r\n    \r\n    // Simulate connection delay\r\n    setTimeout(() => {\r\n      console.log(`Connected to watch party room: ${roomCode}`);\r\n      \r\n      if (this.callbacks.onConnectionChange) {\r\n        this.callbacks.onConnectionChange(true);\r\n      }\r\n      \r\n      // Simulate other users joining after a delay\r\n      this._simulateUserJoins();\r\n    }, 1000);\r\n    \r\n    return true;\r\n  }\r\n  \r\n  // Disconnect\r\n  disconnect() {\r\n    console.log('Disconnected from watch party');\r\n    \r\n    if (this.callbacks.onConnectionChange) {\r\n      this.callbacks.onConnectionChange(false);\r\n    }\r\n    \r\n    this.roomCode = null;\r\n    this.username = null;\r\n  }\r\n  \r\n  // Send playback update\r\n  sendPlaybackUpdate(action, currentTime) {\r\n    console.log(`Sending playback update: ${action} at ${currentTime}`);\r\n    \r\n    // Simulate other users receiving the update\r\n    setTimeout(() => {\r\n      if (this.callbacks.onPlaybackUpdate) {\r\n        this.callbacks.onPlaybackUpdate({\r\n          username: this.username,\r\n          action,\r\n          currentTime,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  // Send chat message\r\n  sendChatMessage(message) {\r\n    console.log(`Sending chat message: ${message}`);\r\n    \r\n    // Simulate message being sent and received\r\n    setTimeout(() => {\r\n      if (this.callbacks.onChatMessage) {\r\n        this.callbacks.onChatMessage({\r\n          messageId: `msg-${Date.now()}`,\r\n          username: this.username,\r\n          message,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n      \r\n      // Simulate another user responding\r\n      this._simulateUserResponse(message);\r\n    }, 300);\r\n  }\r\n  \r\n  // Send reaction\r\n  sendReaction(emoji) {\r\n    console.log(`Sending reaction: ${emoji}`);\r\n    \r\n    // Simulate reaction being sent and received\r\n    setTimeout(() => {\r\n      if (this.callbacks.onReaction) {\r\n        this.callbacks.onReaction({\r\n          username: this.username,\r\n          emoji,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  // Set callback functions\r\n  on(event, callback) {\r\n    if (this.callbacks.hasOwnProperty(event)) {\r\n      this.callbacks[event] = callback;\r\n    } else {\r\n      console.error(`Unknown event: ${event}`);\r\n    }\r\n  }\r\n  \r\n  // Private methods for simulation\r\n  \r\n  // Simulate other users joining\r\n  _simulateUserJoins() {\r\n    const randomUsers = this._getRandomUsers(2);\r\n    \r\n    randomUsers.forEach((user, index) => {\r\n      setTimeout(() => {\r\n        if (this.callbacks.onUserJoined) {\r\n          this.callbacks.onUserJoined({\r\n            userId: user.id,\r\n            username: user.username,\r\n            isHost: user.isHost,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      }, 2000 + (index * 3000)); // Stagger joins\r\n    });\r\n  }\r\n  \r\n  // Simulate user responses to chat\r\n  _simulateUserResponse(originalMessage) {\r\n    // Only respond sometimes\r\n    if (Math.random() > 0.7) {\r\n      return;\r\n    }\r\n    \r\n    const randomUser = this._getRandomUsers(1)[0];\r\n    const responses = [\r\n      \"Haha, that's funny!\",\r\n      \"I agree!\",\r\n      \"Wait, what's happening now?\",\r\n      \"This part is so good!\",\r\n      \"I can't believe this scene!\",\r\n      \"Did you see that?\",\r\n      \"Classic moment right here\",\r\n      \"I love this movie!\"\r\n    ];\r\n    \r\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    \r\n    setTimeout(() => {\r\n      if (this.callbacks.onChatMessage) {\r\n        this.callbacks.onChatMessage({\r\n          messageId: `msg-${Date.now()}`,\r\n          username: randomUser.username,\r\n          message: randomResponse,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 3000 + (Math.random() * 5000));\r\n    \r\n    // Sometimes send a reaction too\r\n    if (Math.random() > 0.5) {\r\n      const emojis = ['👍', '❤️', '😂', '😮', '😢', '👏', '🔥', '🤔'];\r\n      const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\r\n      \r\n      setTimeout(() => {\r\n        if (this.callbacks.onReaction) {\r\n          this.callbacks.onReaction({\r\n            username: randomUser.username,\r\n            emoji: randomEmoji,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      }, 2000 + (Math.random() * 3000));\r\n    }\r\n  }\r\n  \r\n  // Get random users from the mock participants\r\n  _getRandomUsers(count) {\r\n    const shuffled = [...this.mockParticipants].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n}\r\n\r\nexport default new WatchPartyService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}