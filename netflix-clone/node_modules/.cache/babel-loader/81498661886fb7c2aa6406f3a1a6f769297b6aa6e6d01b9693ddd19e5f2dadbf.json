{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useLocation,useNavigate}from'react-router-dom';import{FaChevronDown,FaThList,FaThLarge}from'react-icons/fa';import MovieCard from'../components/MovieCard';import MovieRow from'../components/MovieRow';import api from'../services/api';import'./Movies.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Movies=()=>{const location=useLocation();const navigate=useNavigate();const[movies,setMovies]=useState([]);const[genres,setGenres]=useState([]);const[selectedGenre,setSelectedGenre]=useState(null);const[loading,setLoading]=useState(true);const[viewMode,setViewMode]=useState('grid');// 'grid' or 'list'\nconst[showGenreDropdown,setShowGenreDropdown]=useState(false);// Get genre from URL if present\nuseEffect(()=>{const params=new URLSearchParams(location.search);const genreId=params.get('genre');if(genreId){const genre=genres.find(g=>g.id.toString()===genreId);setSelectedGenre(genre||null);}else{setSelectedGenre(null);}},[location.search,genres]);// Fetch genres and movies\nuseEffect(()=>{const fetchData=async()=>{setLoading(true);try{// Fetch genres\nconst genresData=await api.getGenres();setGenres(genresData);// Fetch movies by genre or all movies\nif(selectedGenre){const moviesByGenre=await api.getMoviesByGenre(selectedGenre.id);setMovies(moviesByGenre);}else{// Fetch movies for each genre to create rows\nconst allGenreMovies={};for(const genre of genresData){const genreMovies=await api.getMoviesByGenre(genre.id);if(genreMovies.length>0){allGenreMovies[genre.id]={genre:genre,movies:genreMovies};}}setMovies(allGenreMovies);}}catch(error){console.error('Error fetching data:',error);}finally{setLoading(false);}};fetchData();},[selectedGenre]);const handleGenreSelect=genre=>{setSelectedGenre(genre);setShowGenreDropdown(false);// Update URL\nif(genre){navigate(`/movies?genre=${genre.id}`);}else{navigate('/movies');}};const toggleViewMode=()=>{setViewMode(viewMode==='grid'?'list':'grid');};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"movies-page\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"movies-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Movies\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"movies-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"genre-dropdown\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"genre-dropdown-btn\",onClick:()=>setShowGenreDropdown(!showGenreDropdown),children:[/*#__PURE__*/_jsx(\"span\",{children:\"Genres\"}),/*#__PURE__*/_jsx(FaChevronDown,{})]}),showGenreDropdown&&/*#__PURE__*/_jsxs(\"div\",{className:\"genre-dropdown-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"genre-option\",onClick:()=>handleGenreSelect(null),children:\"All Genres\"}),genres.map(genre=>/*#__PURE__*/_jsx(\"div\",{className:\"genre-option\",onClick:()=>handleGenreSelect(genre),children:genre.name},genre.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:`view-btn ${viewMode==='list'?'active':''}`,onClick:()=>setViewMode('list'),children:/*#__PURE__*/_jsx(FaThList,{})}),/*#__PURE__*/_jsx(\"button\",{className:`view-btn ${viewMode==='grid'?'active':''}`,onClick:()=>setViewMode('grid'),children:/*#__PURE__*/_jsx(FaThLarge,{})})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"movies-content\",children:selectedGenre?/*#__PURE__*/// Show movies for selected genre in grid or list view\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"genre-title\",children:[selectedGenre.name,\" Movies\"]}),/*#__PURE__*/_jsx(\"div\",{className:`movies-${viewMode}`,children:movies.length>0?movies.map(movie=>/*#__PURE__*/_jsx(MovieCard,{movie:movie},movie.id)):/*#__PURE__*/_jsx(\"p\",{className:\"no-movies\",children:\"No movies found for this genre.\"})})]}):/*#__PURE__*/// Show all genres with horizontal rows\n_jsx(\"div\",{className:\"genre-rows\",children:Object.values(movies).map(_ref=>{let{genre,movies}=_ref;return/*#__PURE__*/_jsx(MovieRow,{title:genre.name,movies:movies,onTitleClick:()=>handleGenreSelect(genre)},genre.id);})})})]});};export default Movies;","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","FaChevronDown","FaThList","FaThLarge","MovieCard","MovieRow","api","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Movies","location","navigate","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","loading","setLoading","viewMode","setViewMode","showGenreDropdown","setShowGenreDropdown","params","URLSearchParams","search","genreId","get","genre","find","g","id","toString","fetchData","genresData","getGenres","moviesByGenre","getMoviesByGenre","allGenreMovies","genreMovies","length","error","console","handleGenreSelect","toggleViewMode","className","children","onClick","map","name","movie","Object","values","_ref","title","onTitleClick"],"sources":["C:/Users/hp/.cursor-tutor/netflix-clone/src/pages/Movies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { FaChevronDown, FaThList, FaThLarge } from 'react-icons/fa';\r\nimport MovieCard from '../components/MovieCard';\r\nimport MovieRow from '../components/MovieRow';\r\nimport api from '../services/api';\r\nimport './Movies.css';\r\n\r\nconst Movies = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [movies, setMovies] = useState([]);\r\n  const [genres, setGenres] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'\r\n  const [showGenreDropdown, setShowGenreDropdown] = useState(false);\r\n\r\n  // Get genre from URL if present\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n    const genreId = params.get('genre');\r\n    \r\n    if (genreId) {\r\n      const genre = genres.find(g => g.id.toString() === genreId);\r\n      setSelectedGenre(genre || null);\r\n    } else {\r\n      setSelectedGenre(null);\r\n    }\r\n  }, [location.search, genres]);\r\n\r\n  // Fetch genres and movies\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch genres\r\n        const genresData = await api.getGenres();\r\n        setGenres(genresData);\r\n        \r\n        // Fetch movies by genre or all movies\r\n        if (selectedGenre) {\r\n          const moviesByGenre = await api.getMoviesByGenre(selectedGenre.id);\r\n          setMovies(moviesByGenre);\r\n        } else {\r\n          // Fetch movies for each genre to create rows\r\n          const allGenreMovies = {};\r\n          \r\n          for (const genre of genresData) {\r\n            const genreMovies = await api.getMoviesByGenre(genre.id);\r\n            if (genreMovies.length > 0) {\r\n              allGenreMovies[genre.id] = {\r\n                genre: genre,\r\n                movies: genreMovies\r\n              };\r\n            }\r\n          }\r\n          \r\n          setMovies(allGenreMovies);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedGenre]);\r\n\r\n  const handleGenreSelect = (genre) => {\r\n    setSelectedGenre(genre);\r\n    setShowGenreDropdown(false);\r\n    \r\n    // Update URL\r\n    if (genre) {\r\n      navigate(`/movies?genre=${genre.id}`);\r\n    } else {\r\n      navigate('/movies');\r\n    }\r\n  };\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === 'grid' ? 'list' : 'grid');\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"movies-page\">\r\n      <div className=\"movies-header\">\r\n        <h1>Movies</h1>\r\n        \r\n        <div className=\"movies-controls\">\r\n          <div className=\"genre-dropdown\">\r\n            <button \r\n              className=\"genre-dropdown-btn\"\r\n              onClick={() => setShowGenreDropdown(!showGenreDropdown)}\r\n            >\r\n              <span>Genres</span>\r\n              <FaChevronDown />\r\n            </button>\r\n            \r\n            {showGenreDropdown && (\r\n              <div className=\"genre-dropdown-content\">\r\n                <div \r\n                  className=\"genre-option\"\r\n                  onClick={() => handleGenreSelect(null)}\r\n                >\r\n                  All Genres\r\n                </div>\r\n                {genres.map(genre => (\r\n                  <div \r\n                    key={genre.id}\r\n                    className=\"genre-option\"\r\n                    onClick={() => handleGenreSelect(genre)}\r\n                  >\r\n                    {genre.name}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"view-toggle\">\r\n            <button \r\n              className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\r\n              onClick={() => setViewMode('list')}\r\n            >\r\n              <FaThList />\r\n            </button>\r\n            <button \r\n              className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\r\n              onClick={() => setViewMode('grid')}\r\n            >\r\n              <FaThLarge />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"movies-content\">\r\n        {selectedGenre ? (\r\n          // Show movies for selected genre in grid or list view\r\n          <>\r\n            <h2 className=\"genre-title\">{selectedGenre.name} Movies</h2>\r\n            <div className={`movies-${viewMode}`}>\r\n              {movies.length > 0 ? (\r\n                movies.map(movie => (\r\n                  <MovieCard key={movie.id} movie={movie} />\r\n                ))\r\n              ) : (\r\n                <p className=\"no-movies\">No movies found for this genre.</p>\r\n              )}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          // Show all genres with horizontal rows\r\n          <div className=\"genre-rows\">\r\n            {Object.values(movies).map(({ genre, movies }) => (\r\n              <MovieRow \r\n                key={genre.id} \r\n                title={genre.name} \r\n                movies={movies}\r\n                onTitleClick={() => handleGenreSelect(genre)}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}